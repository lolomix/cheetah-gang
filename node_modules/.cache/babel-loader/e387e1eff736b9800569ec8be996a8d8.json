{"ast":null,"code":"// constants\nimport Web3EthContract from 'web3-eth-contract';\nimport Web3 from 'web3';\nimport SmartContract from '../../contracts/ABI.json'; // log\n\nimport { fetchData } from '../data/dataActions';\nconst {\n  REACT_APP_CONTRACT_ADDRESS,\n  REACT_APP_NETWORK_ID,\n  REACT_APP_NETWORK\n} = process.env;\nconsole.log(process.env);\n\nconst connectRequest = () => {\n  return {\n    type: 'CONNECTION_REQUEST'\n  };\n};\n\nconst connectSuccess = payload => {\n  return {\n    type: 'CONNECTION_SUCCESS',\n    payload: payload\n  };\n};\n\nconst connectFailed = payload => {\n  return {\n    type: 'CONNECTION_FAILED',\n    payload: payload\n  };\n};\n\nconst updateAccountRequest = payload => {\n  return {\n    type: 'UPDATE_ACCOUNT',\n    payload: payload\n  };\n};\n\nexport const connect = () => {\n  return async dispatch => {\n    dispatch(connectRequest());\n    const {\n      ethereum\n    } = window;\n    const metamaskIsInstalled = ethereum && ethereum.isMetaMask;\n\n    try {\n      await window.ethereum.request({\n        method: 'eth_requestAccounts'\n      });\n    } catch (error) {\n      console.log(error);\n      dispatch(connectFailed('Something went wrong'));\n    }\n\n    if (metamaskIsInstalled) {\n      Web3EthContract.setProvider(ethereum);\n      let web3 = new Web3(ethereum); // console.log(\"web3\", web3.eth.getBlock(\"latest\"));\n\n      try {\n        const accounts = await ethereum.request({\n          method: 'eth_requestAccounts'\n        });\n        const networkId = await ethereum.request({\n          method: 'net_version'\n        });\n        console.log(networkId); // const NetworkData = await SmartContract.networks[networkId];\n\n        if (Number(networkId) === Number(REACT_APP_NETWORK_ID)) {\n          const SmartContractObj = new Web3EthContract(SmartContract, REACT_APP_CONTRACT_ADDRESS);\n          dispatch(connectSuccess({\n            account: accounts[0],\n            smartContract: SmartContractObj,\n            web3: web3\n          })); // Add listeners start\n\n          ethereum.on('accountsChanged', accounts => {\n            dispatch(updateAccount(accounts[0]));\n          });\n          ethereum.on('chainChanged', () => {\n            window.location.reload();\n          }); // Add listeners end\n        } else {\n          dispatch(connectFailed(`Change network to ${REACT_APP_NETWORK}`));\n        }\n      } catch (err) {\n        dispatch(connectFailed('Something went wrong'));\n      }\n    } else {\n      dispatch(connectFailed('Install Metamask'));\n    }\n  };\n};\nexport const updateAccount = account => {\n  return async dispatch => {\n    dispatch(updateAccountRequest({\n      account: account\n    }));\n    dispatch(fetchData(account));\n  };\n};","map":{"version":3,"sources":["C:/Users/HP/Downloads/cheetah-gang/src/redux/blockchain/blockchainActions.js"],"names":["Web3EthContract","Web3","SmartContract","fetchData","REACT_APP_CONTRACT_ADDRESS","REACT_APP_NETWORK_ID","REACT_APP_NETWORK","process","env","console","log","connectRequest","type","connectSuccess","payload","connectFailed","updateAccountRequest","connect","dispatch","ethereum","window","metamaskIsInstalled","isMetaMask","request","method","error","setProvider","web3","accounts","networkId","Number","SmartContractObj","account","smartContract","on","updateAccount","location","reload","err"],"mappings":"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","sourcesContent":["// constants\nimport Web3EthContract from 'web3-eth-contract';\nimport Web3 from 'web3';\nimport SmartContract from '../../contracts/ABI.json';\n// log\nimport { fetchData } from '../data/dataActions';\n\nconst { REACT_APP_CONTRACT_ADDRESS, REACT_APP_NETWORK_ID, REACT_APP_NETWORK } =\n  process.env;\nconsole.log(process.env);\n\nconst connectRequest = () => {\n  return {\n    type: 'CONNECTION_REQUEST',\n  };\n};\n\nconst connectSuccess = payload => {\n  return {\n    type: 'CONNECTION_SUCCESS',\n    payload: payload,\n  };\n};\n\nconst connectFailed = payload => {\n  return {\n    type: 'CONNECTION_FAILED',\n    payload: payload,\n  };\n};\n\nconst updateAccountRequest = payload => {\n  return {\n    type: 'UPDATE_ACCOUNT',\n    payload: payload,\n  };\n};\n\nexport const connect = () => {\n  return async dispatch => {\n    dispatch(connectRequest());\n    const { ethereum } = window;\n    const metamaskIsInstalled = ethereum && ethereum.isMetaMask;\n    try {\n      await window.ethereum.request({\n        method: 'eth_requestAccounts',\n      });\n    } catch (error) {\n      console.log(error);\n      dispatch(connectFailed('Something went wrong'));\n    }\n    if (metamaskIsInstalled) {\n      Web3EthContract.setProvider(ethereum);\n      let web3 = new Web3(ethereum);\n      // console.log(\"web3\", web3.eth.getBlock(\"latest\"));\n      try {\n        const accounts = await ethereum.request({\n          method: 'eth_requestAccounts',\n        });\n\n        const networkId = await ethereum.request({\n          method: 'net_version',\n        });\n        console.log(networkId);\n        // const NetworkData = await SmartContract.networks[networkId];\n        if (Number(networkId) === Number(REACT_APP_NETWORK_ID)) {\n          const SmartContractObj = new Web3EthContract(\n            SmartContract,\n            REACT_APP_CONTRACT_ADDRESS\n          );\n          dispatch(\n            connectSuccess({\n              account: accounts[0],\n              smartContract: SmartContractObj,\n              web3: web3,\n            })\n          );\n          // Add listeners start\n          ethereum.on('accountsChanged', accounts => {\n            dispatch(updateAccount(accounts[0]));\n          });\n          ethereum.on('chainChanged', () => {\n            window.location.reload();\n          });\n          // Add listeners end\n        } else {\n          dispatch(connectFailed(`Change network to ${REACT_APP_NETWORK}`));\n        }\n      } catch (err) {\n        dispatch(connectFailed('Something went wrong'));\n      }\n    } else {\n      dispatch(connectFailed('Install Metamask'));\n    }\n  };\n};\n\nexport const updateAccount = account => {\n  return async dispatch => {\n    dispatch(updateAccountRequest({ account: account }));\n    dispatch(fetchData(account));\n  };\n};\n"]},"metadata":{},"sourceType":"module"}