{"ast":null,"code":"// log\nimport store from '../store';\n\nconst fetchDataRequest = () => {\n  return {\n    type: 'CHECK_DATA_REQUEST'\n  };\n};\n\nconst fetchDataSuccess = payload => {\n  return {\n    type: 'CHECK_DATA_SUCCESS',\n    payload: payload\n  };\n};\n\nconst fetchDataFailed = payload => {\n  return {\n    type: 'CHECK_DATA_FAILED',\n    payload: payload\n  };\n};\n\nexport const fetchData = account => {\n  return async dispatch => {\n    dispatch(fetchDataRequest());\n\n    try {\n      let name = await store.getState().blockchain.smartContract.methods.name().call();\n      let totalSupply = await store.getState().blockchain.smartContract.methods.totalSupply().call();\n      let cost = await store.getState().blockchain.smartContract.methods.cost().call();\n      let maxSupply = await store.getState().blockchain.smartContract.methods.maxSupply().call();\n      let maxMintAmount = await store.getState().blockchain.smartContract.methods.maxMintAmount().call();\n      const price = store.getState().blockchain.web3.utils.fromWei(cost, 'ether');\n      dispatch(fetchDataSuccess({\n        name,\n        totalSupply,\n        cost: price,\n        maxSupply,\n        maxMintAmount\n      }));\n    } catch (err) {\n      console.log(err);\n      dispatch(fetchDataFailed('Could not load data from contract.'));\n    }\n  };\n};","map":{"version":3,"sources":["C:/Users/HP/Downloads/cheetah-gang/src/redux/data/dataActions.js"],"names":["store","fetchDataRequest","type","fetchDataSuccess","payload","fetchDataFailed","fetchData","account","dispatch","name","getState","blockchain","smartContract","methods","call","totalSupply","cost","maxSupply","maxMintAmount","price","web3","utils","fromWei","err","console","log"],"mappings":"AAAA;AACA,OAAOA,KAAP,MAAkB,UAAlB;;AAEA,MAAMC,gBAAgB,GAAG,MAAM;AAC7B,SAAO;AACLC,IAAAA,IAAI,EAAE;AADD,GAAP;AAGD,CAJD;;AAMA,MAAMC,gBAAgB,GAAGC,OAAO,IAAI;AAClC,SAAO;AACLF,IAAAA,IAAI,EAAE,oBADD;AAELE,IAAAA,OAAO,EAAEA;AAFJ,GAAP;AAID,CALD;;AAOA,MAAMC,eAAe,GAAGD,OAAO,IAAI;AACjC,SAAO;AACLF,IAAAA,IAAI,EAAE,mBADD;AAELE,IAAAA,OAAO,EAAEA;AAFJ,GAAP;AAID,CALD;;AAOA,OAAO,MAAME,SAAS,GAAGC,OAAO,IAAI;AAClC,SAAO,MAAMC,QAAN,IAAkB;AACvBA,IAAAA,QAAQ,CAACP,gBAAgB,EAAjB,CAAR;;AACA,QAAI;AACF,UAAIQ,IAAI,GAAG,MAAMT,KAAK,CACnBU,QADc,GAEdC,UAFc,CAEHC,aAFG,CAEWC,OAFX,CAEmBJ,IAFnB,GAGdK,IAHc,EAAjB;AAIA,UAAIC,WAAW,GAAG,MAAMf,KAAK,CAC1BU,QADqB,GAErBC,UAFqB,CAEVC,aAFU,CAEIC,OAFJ,CAEYE,WAFZ,GAGrBD,IAHqB,EAAxB;AAIA,UAAIE,IAAI,GAAG,MAAMhB,KAAK,CACnBU,QADc,GAEdC,UAFc,CAEHC,aAFG,CAEWC,OAFX,CAEmBG,IAFnB,GAGdF,IAHc,EAAjB;AAIA,UAAIG,SAAS,GAAG,MAAMjB,KAAK,CACxBU,QADmB,GAEnBC,UAFmB,CAERC,aAFQ,CAEMC,OAFN,CAEcI,SAFd,GAGnBH,IAHmB,EAAtB;AAIA,UAAII,aAAa,GAAE,MAAMlB,KAAK,CAC3BU,QADsB,GAEtBC,UAFsB,CAEXC,aAFW,CAEGC,OAFH,CAEWK,aAFX,GAGtBJ,IAHsB,EAAzB;AAIA,YAAMK,KAAK,GAAGnB,KAAK,CAACU,QAAN,GAAiBC,UAAjB,CAA4BS,IAA5B,CAAiCC,KAAjC,CAAuCC,OAAvC,CAA+CN,IAA/C,EAAqD,OAArD,CAAd;AACER,MAAAA,QAAQ,CACNL,gBAAgB,CAAC;AACfM,QAAAA,IADe;AAEfM,QAAAA,WAFe;AAGfC,QAAAA,IAAI,EAAEG,KAHS;AAIfF,QAAAA,SAJe;AAKfC,QAAAA;AALe,OAAD,CADV,CAAR;AASH,KA/BD,CA+BE,OAAOK,GAAP,EAAY;AACZC,MAAAA,OAAO,CAACC,GAAR,CAAYF,GAAZ;AACAf,MAAAA,QAAQ,CAACH,eAAe,CAAC,oCAAD,CAAhB,CAAR;AACD;AACF,GArCD;AAsCD,CAvCM","sourcesContent":["// log\nimport store from '../store';\n\nconst fetchDataRequest = () => {\n  return {\n    type: 'CHECK_DATA_REQUEST',\n  };\n};\n\nconst fetchDataSuccess = payload => {\n  return {\n    type: 'CHECK_DATA_SUCCESS',\n    payload: payload,\n  };\n};\n\nconst fetchDataFailed = payload => {\n  return {\n    type: 'CHECK_DATA_FAILED',\n    payload: payload,\n  };\n};\n\nexport const fetchData = account => {\n  return async dispatch => {\n    dispatch(fetchDataRequest());\n    try {\n      let name = await store\n        .getState()\n        .blockchain.smartContract.methods.name()\n        .call();\n      let totalSupply = await store\n        .getState()\n        .blockchain.smartContract.methods.totalSupply()\n        .call();\n      let cost = await store\n        .getState()\n        .blockchain.smartContract.methods.cost()\n        .call();\n      let maxSupply = await store\n        .getState()\n        .blockchain.smartContract.methods.maxSupply()\n        .call();\n      let maxMintAmount= await store\n        .getState()\n        .blockchain.smartContract.methods.maxMintAmount()\n        .call();\n      const price = store.getState().blockchain.web3.utils.fromWei(cost, 'ether');\n        dispatch(\n          fetchDataSuccess({\n            name,\n            totalSupply,\n            cost: price,\n            maxSupply,\n            maxMintAmount,\n          })\n        );\n    } catch (err) {\n      console.log(err);\n      dispatch(fetchDataFailed('Could not load data from contract.'));\n    }\n  };\n};\n"]},"metadata":{},"sourceType":"module"}